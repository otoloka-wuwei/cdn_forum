{"ast":null,"code":"var _jsxFileName = \"D:\\\\otoProject\\\\workspace\\\\otoloka-mobile-forum\\\\components\\\\image-view-modal\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useLayoutEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './index.module.scss';\nimport mousetrap from 'mousetrap';\nimport PlaceHolderImage from '../../static/images/pleaceholder.svg';\nimport Swiper from 'swiper';\nimport SwiperVideo from '../swiper-video';\n\nconst ImageViewModal = ({\n  imageList,\n  onClose\n}) => {\n  const {\n    0: id\n  } = useState('publishImg' + (Math.random() * 1000000).toFixed(0));\n  const {\n    0: showFullScreen,\n    1: setShowFullScreen\n  } = useState(false);\n  const {\n    0: hidden,\n    1: setHidden\n  } = useState(true);\n  const {\n    0: $imageList,\n    1: setImageList\n  } = useState(imageList);\n  const imageListElememt = useRef();\n  const {\n    0: count,\n    1: setCount\n  } = useState(imageList.findIndex(item => item.active) + 1);\n  const {\n    0: startIndex,\n    1: setStartIndex\n  } = useState(imageList.findIndex(item => item.active));\n  const {\n    0: isMuted,\n    1: setIsMuted\n  } = useState(true);\n  const isMutedRef = useRef(true);\n  const {\n    0: showHorn,\n    1: setShowHorn\n  } = useState(false);\n  const mySwiper = useRef();\n  const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n  const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);\n  useLayoutEffect(() => {\n    mySwiper.current = new Swiper(`#${id} .swiper-container`, {\n      speed: 1000,\n      initialSlide: startIndex,\n      autoplay: false,\n      loop: false,\n      on: {\n        slideChangeTransitionStart: function () {\n          setCount(this.activeIndex + 1);\n          setStartIndex(this.activeIndex);\n          const item = imageList[this.activeIndex];\n          setImageList(imageList => imageList.map(imageItem => {\n            if (item.url === imageItem.url) {\n              imageItem.active = true;\n            } else {\n              imageItem.active = false;\n            }\n\n            return imageItem;\n          }));\n          handelShowHorn(this.activeIndex);\n          handelVideoAutoPlay();\n          imageListElememt.current.scrollTo({\n            top: 0,\n            left: this.activeIndex * 42,\n            behavior: 'smooth'\n          });\n        }\n      }\n    });\n    return () => {\n      mySwiper.current.destroy(true, true);\n    };\n  }, [id]);\n  useEffect(() => {\n    setTimeout(() => {\n      setHidden(false);\n    }, 20);\n    mousetrap.bind('esc', handleCloseModal);\n\n    if (startIndex == 0) {\n      handelShowHorn(startIndex);\n    }\n\n    imageListElememt.current.scrollTo({\n      top: 0,\n      left: startIndex * 42,\n      behavior: 'smooth'\n    });\n    let timer = setTimeout(() => {\n      showFullScreenImg();\n    }, 2000);\n    return () => {\n      clearTimeout(timer);\n      mousetrap.unbind('esc');\n    };\n  }, []);\n\n  const handelShowHorn = index => {\n    if (imageList[index].type === 2) {\n      setShowHorn(true);\n    } else {\n      setShowHorn(false);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setHidden(true);\n  };\n\n  const handelVideoAutoPlay = () => {\n    const targetList = document.getElementsByTagName('video');\n\n    for (let i = 0; i < targetList.length; i++) {\n      const target = targetList[i];\n\n      if (target.paused && target.autoplay) {\n        target.muted = isMutedRef.current;\n        target.play();\n      } else if (!target.paused) {\n        target.muted = true;\n        target.pause();\n      }\n    }\n  };\n\n  const handleClickImage = (item, index) => {\n    return () => {\n      let count = index + 1;\n      setImageList(imageList => imageList.map((imageItem, imgindex) => {\n        if (item.url === imageItem.url) {\n          imageItem.active = true;\n        } else {\n          imageItem.active = false;\n        }\n\n        return imageItem;\n      }));\n      const targetList = document.getElementsByTagName('video');\n\n      for (let i = 0; i < targetList.length; i++) {\n        const target = targetList[i];\n        target.muted = true;\n        target.pause();\n      }\n\n      mySwiper.current.slideTo(index, 300, false);\n      setStartIndex(index);\n      setCount(count);\n    };\n  };\n\n  const showFullScreenImg = () => {\n    setShowFullScreen(!showFullScreen);\n  };\n\n  const handleCloseAnimationEnd = () => {\n    if (hidden === true) {\n      if (typeof onClose === 'function') {\n        onClose();\n      }\n    }\n  };\n\n  const handelVideoMuted = () => {\n    isMutedRef.current = !isMutedRef.current;\n    setIsMuted(isMutedRef.current);\n    const targetList = document.getElementsByTagName('video');\n\n    for (let i = 0; i < targetList.length; i++) {\n      const target = targetList[i];\n\n      if (target.autoplay) {\n        target.muted = isMutedRef.current;\n      }\n    }\n  };\n\n  const handelPlay = () => {\n    setShowFullScreen(true);\n  };\n\n  const handelPause = () => {\n    setShowFullScreen(false);\n  };\n\n  return ReactDOM.createPortal(__jsx(\"div\", {\n    id: id,\n    onTransitionEnd: handleCloseAnimationEnd,\n    className: `${styles['image-view-modal-container']} ${hidden ? styles['hidden'] : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles['right-handel'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, showHorn ? __jsx(\"div\", {\n    className: styles['volume'],\n    onClick: handelVideoMuted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: `icon-font ${isMuted ? `uniE912 ${styles['muted']}` : 'uniE911'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  })) : null, __jsx(\"div\", {\n    className: `${styles['close-button']} ${showFullScreen ? styles['showfullScreen'] : styles['notfullScreen']}`,\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: \"icon-font uniE907\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }))), __jsx(\"div\", {\n    className: \"swiper-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"swiper-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, $imageList.map((item, index) => __jsx(\"div\", {\n    key: index,\n    className: `swiper-slide   ${item.height / vh > item.width / vw ? 'overFull' : 'notFull'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, item.type === 1 ? __jsx(\"img\", {\n    src: item.url,\n    className: \"zoom\",\n    alt: \"zoom\",\n    onClick: showFullScreenImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }) : __jsx(\"div\", {\n    className: `video-zoom`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 19\n    }\n  }, __jsx(SwiperVideo, {\n    data: item,\n    onPlay: handelPlay,\n    onPause: handelPause,\n    autoPlay: item.active,\n    muted: item.active,\n    click: true,\n    loading: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  })))))), __jsx(\"div\", {\n    className: `${styles['image-list-container']} ${showFullScreen ? styles['showfullScreen'] : styles['notfullScreen']}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles['image-count'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: styles['count-number'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }, count), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  }, \" /\", $imageList.length)), __jsx(\"div\", {\n    className: styles['image-list-ccontent'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles['image-list-wrapper'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, __jsx(\"ul\", {\n    ref: imageListElememt,\n    className: styles['image-list'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, $imageList.map((item, index) => __jsx(\"li\", {\n    key: index,\n    className: `${styles['image-item']} ${item.active ? styles['active'] : ''}`,\n    onClick: handleClickImage(item, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, item.type === 1 ? __jsx(\"span\", {\n    className: styles['image-item-placeholder'],\n    style: {\n      backgroundImage: `url('${item.url}')`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    className: styles['item-img'],\n    src: item.url,\n    alt: \"car-image-small\",\n    onError: () => item.url = PlaceHolderImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 23\n    }\n  })) : __jsx(\"div\", {\n    className: styles['img-item-container'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 23\n    }\n  }, item.headUrl.includes('#t=1') ? __jsx(\"video\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 27\n    }\n  }, __jsx(\"source\", {\n    src: item.headUrl,\n    type: \"video/mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 29\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"img\", {\n    className: styles['item-img'],\n    src: item.headUrl,\n    alt: \"car-image-small\",\n    onError: () => item.headUrl = PlaceHolderImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 31\n    }\n  })))))))))), document.body);\n};\n\nexport default ImageViewModal;","map":null,"metadata":{},"sourceType":"module"}