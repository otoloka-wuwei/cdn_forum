{"ast":null,"code":"const get = function (url, body = {}) {\n  try {\n    const bodyArr = [];\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      body.token = token;\n    }\n\n    Object.keys(body).forEach(key => {\n      bodyArr.push(key + '=' + body[key].toString());\n    });\n\n    if (bodyArr.length > 0) {\n      url = `${url}?${bodyArr.join('&')}`;\n    }\n\n    return request(url, 'GET');\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst post = function (url, body = {}) {\n  return request(url, 'POST', body);\n};\n\nconst del = function (url, body = {}) {\n  return request(url, 'DELETE', body);\n};\n\nconst patch = function (url, body = {}) {\n  return request(url, 'PATCH', body);\n};\n\nconst request = function (url, method, body = {}, headers = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n}) {\n  try {\n    if (url.startsWith('/')) {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        body.token = token;\n      }\n    }\n\n    return Promise.resolve(new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        console.log(url);\n        reject(new Error('request is timeout'));\n      }, 30 * 1000);\n      fetch(url, {\n        body: method === 'GET' ? null : JSON.stringify(body),\n        headers,\n        method\n      }).then(resp => {\n        clearTimeout(timeoutId);\n        return Promise.resolve(resp.json());\n      }).then(resp => {\n        if (resp.code !== 200 && resp.code !== 9990) {\n          return Promise.reject({\n            code: resp.code,\n            message: resp.resultMsg,\n            data: resp.data\n          });\n        }\n\n        resolve(resp);\n      }).catch(error => {\n        clearTimeout(timeoutId);\n        reject(error);\n      });\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst HttpClient = {\n  get,\n  post,\n  del,\n  patch,\n  request\n};\nexport default HttpClient;","map":null,"metadata":{},"sourceType":"module"}