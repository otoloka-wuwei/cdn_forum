{"ast":null,"code":"import HttpClient from '../http/HttpClient';\nimport HttpClientServer from '../http/HttpClientServer';\nimport { formatArticleList, formatCategoryList } from '../format';\nconst pageSize = 15;\nexport default class HomePageService {\n  constructor() {\n    this.promiseVersionList = {\n      '/web/userarticle/queryArticlesList.json': 0,\n      '/web/userarticle/getForumBanner.json': 0\n    };\n  }\n\n  deleteArticle(articleId) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/userarticle/deleteArticle.json', {\n        articleId\n      }).then(resp => Promise.resolve(resp.data)));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  updateArticleSourceStatus(articleId) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/userarticle/updateArticleSourceStatus.json', {\n        articleId\n      }).then(resp => Promise.resolve(resp)));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  getBannerByCategoryId(forumCategoryId) {\n    try {\n      const _this = this;\n\n      const url = '/web/userarticle/getForumBanner.json';\n      _this.promiseVersionList[url] += 1;\n      const currentPromiseVersion = _this.promiseVersionList[url];\n      return Promise.resolve(HttpClient.get(url, {\n        forumCategoryId\n      }).then(resp => {\n        if (currentPromiseVersion === _this.promiseVersionList[url]) {\n          return Promise.resolve(resp.data);\n        }\n\n        return Promise.reject(new Error('promise version not match'));\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  getArticleList(categoryId, pageNum) {\n    try {\n      const _this2 = this;\n\n      const url = '/web/userarticle/queryArticlesList.json';\n      _this2.promiseVersionList[url] += 1;\n      const currentPromiseVersion = _this2.promiseVersionList[url];\n      return Promise.resolve(HttpClient.post(url, {\n        systemCategoryId: categoryId,\n        pageNum,\n        pageSize\n      }).then(resp => {\n        if (currentPromiseVersion === _this2.promiseVersionList[url]) {\n          return Promise.resolve(resp.data || {\n            articleList: [],\n            total: 0\n          });\n        }\n\n        return Promise.reject(new Error('promise version not match'));\n      }).then(resp => {\n        if (resp.total > 0) {\n          resp.articleList = formatArticleList(resp.list);\n        } else {\n          resp.articleList = [];\n        }\n\n        return Promise.resolve(resp);\n      }).then(resp => Promise.resolve({\n        articleList: resp.articleList,\n        total: resp.total\n      })));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  getForumCategoryList(originalName) {\n    try {\n      return Promise.resolve(HttpClientServer.get('/web/userarticle/getForumCategorys.json').then(resp => Promise.resolve(formatCategoryList(resp.data, originalName))));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}