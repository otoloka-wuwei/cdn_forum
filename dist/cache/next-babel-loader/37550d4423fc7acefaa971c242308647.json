{"ast":null,"code":"var _jsxFileName = \"D:\\\\otoProject\\\\workspace\\\\otoloka-mobile-forum\\\\pages\\\\index\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport './index.scss';\nimport PostButton from '../../components/post-button';\nimport CategoryList from '../../components/category-list';\nimport Banner from '../../components/banner';\nimport ThreadsItem from '../../components/threads-item';\nimport HomePageService from '../../services/home';\nimport { DomChangeSubject } from '../../subject/dom';\nimport EmptyArticleList from '../../components/empty-article-list';\nimport ScrollContainer from '../../components/scroll-container';\nimport { MobXProviderContext, useObserver } from 'mobx-react';\nimport useToastBox from '../../hooks/toastBoxHooks';\nimport useMessageBox from '../../hooks/messageBoxHooks';\nimport { useRouter } from 'next/router';\nimport { Toast, Modal } from 'antd-mobile';\nimport postMessageToApp from '../../util/bridge';\n\nconst HomePage = ({\n  categoryId,\n  categoryLit\n}) => {\n  const userRef = useRef(null);\n  const {\n    store\n  } = useContext(MobXProviderContext);\n  const {\n    user\n  } = useObserver(() => ({\n    user: store.user\n  }));\n  const {\n    0: articleList,\n    1: setArticleList\n  } = useState(Array.from({\n    length: 15\n  }));\n  const {\n    0: bannerList,\n    1: setBannerList\n  } = useState(Array.from({\n    length: 1\n  }));\n  const categoryIdRef = useRef(categoryId);\n  const isLoaded = useRef(false);\n  const categoryListRef = useRef(categoryLit);\n  const articleFailListRef = useRef([]);\n  const articleListRef = useRef(articleList);\n  const observerListRef = useRef([]);\n  const bannerListRef = useRef(bannerList);\n  const pageSize = 15;\n  const pageNum = useRef(1);\n  const {\n    0: canPullUp,\n    1: setCanPullUp\n  } = useState(false);\n  const service = new HomePageService();\n  const isMounted = useRef(false);\n  const {\n    0: isApp,\n    1: setIsApp\n  } = useState(true);\n  const showToastBox = useToastBox();\n  const showMessageBox = useMessageBox();\n  const router = useRouter();\n  let observer = null;\n  useEffect(() => {\n    //检测列表数据的变化\n    DomChangeSubject.next();\n    observerEle();\n  }, [articleList]);\n  useEffect(() => {\n    if (!!user && user.userId > -1) {\n      userRef.current = user;\n      getFailThreadsList();\n    } else {\n      articleFailListRef.current = [];\n    }\n  }, [user]);\n  useEffect(() => {\n    isMounted.current = true;\n    const isApp = !!window.ReactNativeWebView;\n    setIsApp(isApp);\n\n    if (isApp) {\n      window.threadsAssetsNotExistsCallBack = articleId => {\n        // 这里写上重新上传时资源不存在时候的逻辑\n        setArticleList(articleList => articleList.filter(item => item.articleId !== articleId));\n        DomChangeSubject.next();\n        showMessageBox('error', 'error', 'Gambar/Video Tidak Ada, Silahkan Pilih Kembali');\n        service.updateArticleSourceStatus(articleId);\n      };\n\n      window.repostThreadsFailCallBack = (articleId, failMessage) => {\n        showToastBox('warn', failMessage);\n        setArticleList(articleList => articleList.filter(item => item.articleId !== articleId));\n      };\n\n      window.postThreadsFailCallBack = (articleId, failType) => {\n        setArticleList(articleList => articleList.map(item => {\n          if (item.articleId === articleId) {\n            item.status = -1;\n            item.failType = failType;\n            item.uploadUrls = item.urls;\n            articleFailListRef.current.unshift(item);\n          }\n\n          return item;\n        }));\n      };\n\n      window.postThreadsSuccessCallBack = articleId => {\n        articleFailListRef.current = articleFailListRef.current.filter(item => item.articleId !== articleId); // setArticleList((articleList) =>\n\n        articleListRef.current.forEach(item => {\n          if (item.articleId === articleId) {\n            item.status = 2;\n          }\n\n          return item;\n        }); // );\n      };\n\n      window.repostThreadsSuccessCallBack = articleId => {\n        const index = articleFailListRef.current.findIndex(item => item.articleId === articleId);\n        articleFailListRef.current.splice(index, 1);\n        setArticleList(articleList => articleList.map(item => {\n          if (item.articleId === articleId) {\n            item.status = 2;\n          }\n\n          return item;\n        }));\n      };\n\n      window.updateRepostThreadsStatusCallBack = (articleId, status, value) => {\n        const threadsItem = articleFailListRef.current.find(item => item.articleId === articleId);\n\n        if (threadsItem) {\n          threadsItem.failType = status;\n\n          if (status === 2) {\n            threadsItem.articleId = value;\n          } else if (status === 3) {\n            threadsItem.uploadUrls = value;\n          }\n        }\n      };\n\n      window.postThreadsCallBack = model => {\n        const user = userRef.current;\n        const articleItem = {\n          userId: user.userId,\n          articleId: model.articleId,\n          urls: model.urls,\n          content: model.content,\n          type: model.type,\n          status: model.status,\n          currentViews: 0,\n          supportFlag: 0,\n          messageNums: '0',\n          shareNums: '0',\n          supportNums: '0',\n          userName: user.nickname,\n          userHeadUrl: user.headPortrait,\n          timespanText: 'Baru saja',\n          failType: model.failType,\n          uploadUrls: model.urls,\n          systemCategoryId: model.systemCategoryId\n        };\n        articleFailListRef.current.unshift(articleItem);\n\n        if (model.systemCategoryId === categoryIdRef.current) {\n          setArticleList(articleList => [articleItem, ...articleList]);\n          articleListRef.current = [articleItem, ...articleListRef.current];\n        } else {\n          categoryIdRef.current = model.systemCategoryId;\n          categoryListRef.current = categoryListRef.current.map(item => {\n            if (item.id === categoryIdRef.current) {\n              item.active = true;\n            } else {\n              item.active = false;\n            }\n\n            return item;\n          });\n          getData().then(() => {\n            DomChangeSubject.next();\n          });\n        }\n      };\n    }\n\n    getData().then(() => {\n      isLoaded.current = true;\n      DomChangeSubject.next();\n    });\n    return () => {\n      if (observer !== null) {\n        observerListRef.current.map(item => {\n          observer.unobserve(item);\n        });\n        observer.disconnect();\n      }\n    };\n  }, []);\n\n  const getFailThreadsList = () => {\n    const isApp = !!window.ReactNativeWebView;\n    (isApp ? postMessageToApp({\n      action: 'getThreadsFailList',\n      data: {\n        userId: user.userId,\n        systemCategoryId: categoryId\n      }\n    }) : Promise.resolve([])).then(list => {\n      if (list.length > 0) {\n        const user = userRef.current;\n        articleFailListRef.current = list.map(item => {\n          return {\n            userId: user.userId,\n            articleId: item.articleId,\n            urls: item.urls,\n            content: item.content,\n            type: item.type,\n            uploadUrls: item.urls,\n            status: item.status,\n            currentViews: 0,\n            supportFlag: 0,\n            messageNums: '0',\n            shareNums: '0',\n            supportNums: '0',\n            userName: user.nickname,\n            userHeadUrl: user.headPortrait,\n            timespanText: 'Baru saja',\n            failType: item.failType,\n            systemCategoryId: item.systemCategoryId\n          };\n        });\n\n        if (isLoaded.current === true) {\n          const articleList = [...articleFailListRef.current, ...articleListRef.current];\n          setArticleList(articleList);\n        }\n      } else {\n        articleFailListRef.current = [];\n      }\n    });\n  };\n\n  const handleVideoPlay = (entries, observer) => {\n    const entrie = entries[0];\n    const targetEle = entrie.target;\n    const target = targetEle.getElementsByTagName('video')[0];\n\n    if (!target.paused) {\n      if (entrie.intersectionRatio < 0.7) {\n        target.muted = true;\n        target.pause();\n      }\n    } else {\n      if (entrie.intersectionRatio >= 0.8) {\n        target.muted = true;\n        target.play();\n      }\n    }\n  };\n\n  const getData = () => {\n    return Promise.all([service.getBannerByCategoryId(categoryIdRef.current).then(bannerList => {\n      if (isMounted.current === true) {\n        bannerListRef.current = bannerList;\n        setBannerList(bannerListRef.current);\n      }\n    }), service.getArticleList(categoryIdRef.current, pageNum.current).then(({\n      articleList,\n      total\n    }) => {\n      if (isMounted.current === true) {\n        const finalArticleList = [...articleList];\n        articleFailListRef.current.forEach(item => {\n          if (finalArticleList.findIndex(item2 => item2.articleId === item.articleId) === -1) {\n            finalArticleList.unshift(item);\n          }\n        });\n        setArticleList(finalArticleList);\n        articleListRef.current = finalArticleList;\n        setCanPullUp(pageSize * pageNum.current < total);\n        observerEle(); //可见性观察\n      }\n    })]).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handlePullDownRefresh = () => {\n    setArticleList(Array.from({\n      length: 15\n    }));\n    pageNum.current = 1;\n    return getData();\n  };\n\n  const handlePullUpAppendData = scroll => {\n    pageNum.current += 1;\n    setArticleList(articleList => [...articleList, ...Array.from({\n      length: 15\n    })]);\n    scroll.refresh();\n    return service.getArticleList(categoryIdRef.current, pageNum.current).then(({\n      articleList,\n      total\n    }) => {\n      if (isMounted.current === true) {\n        setArticleList(currentArticleList => [...currentArticleList.filter(item => item), ...articleList]);\n\n        if (pageSize * pageNum.current >= total) {\n          setCanPullUp(false);\n        }\n\n        setTimeout(() => {\n          observerEle(); //可见性观察\n        }, 0);\n      }\n    });\n  };\n\n  const handleClickThreadItem = threadsItem => {\n    return () => {\n      if (!!threadsItem) {\n        if (isApp) {\n          if (threadsItem.status === 2 && threadsItem.articleId.includes('randomArticleId') === false) {\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              action: 'gotoThreadsDetail',\n              data: {\n                threadsId: threadsItem.articleId,\n                scrollToComment: false\n              }\n            }));\n          } else if (threadsItem.status === -1) {\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              action: 'repostFailThreads',\n              data: articleFailListRef.current.find(item => item.articleId === threadsItem.articleId)\n            }));\n            setArticleList(articleList => articleList.map(item => {\n              if (item.articleId === threadsItem.articleId) {\n                item.status = -2;\n              }\n\n              return item;\n            }));\n          } else {\n            showToastBox('warn', 'Silahkan coba kembali setelah sukses mengunggah postingan');\n          }\n        } else {\n          if (threadsItem.status === 2 && threadsItem.articleId.includes('randomArticleId') === false) {\n            router.push(`/forum/threads/p/${threadsItem.articleId}?scrollToComment=false`);\n          } else {\n            showToastBox('warn', 'Silahkan coba kembali setelah sukses mengunggah postingan');\n          }\n        }\n      }\n    };\n  }; //可见性观察\n\n\n  const observerEle = () => {\n    if (observer !== null) {\n      observerListRef.current.map(item => {\n        observer.unobserve(item);\n      });\n    }\n\n    const selectEles = document.getElementsByClassName('video-container');\n\n    if (typeof IntersectionObserver !== 'undefined') {\n      const options = {\n        root: document.getElementsByClassName('article-wrapper')[0],\n        rootMargin: '0px',\n        threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\n      };\n      observer = new IntersectionObserver(handleVideoPlay, options);\n\n      for (let i = 0; i < selectEles.length; i++) {\n        observerListRef.current.push(selectEles[i]);\n        const element = selectEles[i];\n        observer.observe(element);\n      }\n    }\n  };\n\n  const handleRemoveThreads = threadsItem => {\n    Modal.alert('Yakin mau hapus postingan?', 'Hapus', [{\n      text: 'Tidak',\n      onPress: () => {},\n      style: 'cancel'\n    }, {\n      text: 'Ya, keluar',\n      onPress: () => {\n        service.deleteArticle(threadsItem.articleId).then(() => {\n          Toast.success('Berhasil menghapus!', 1);\n\n          if (isApp) {\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              action: 'removeFailThreads',\n              data: {\n                articleId: threadsItem.articleId\n              }\n            }));\n          }\n\n          articleFailListRef.current = articleFailListRef.current.filter(item => item.articleId !== threadsItem.articleId);\n          setArticleList(articleList => articleList.filter(item => item.articleId !== threadsItem.articleId));\n          DomChangeSubject.next();\n        }).catch(error => {\n          console.error(error);\n          Toast.success('Gagal menghapus!', 2);\n        });\n      }\n    }]);\n  };\n\n  return __jsx(\"div\", {\n    className: \"home-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"category-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }\n  }, __jsx(CategoryList, {\n    categoryList: categoryListRef.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"post-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }\n  }, __jsx(PostButton, {\n    systemCategoryId: categoryIdRef.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"article-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }\n  }, __jsx(ScrollContainer, {\n    onPullDown: handlePullDownRefresh,\n    onPullUp: handlePullUpAppendData,\n    pullUp: canPullUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"banner-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 11\n    }\n  }, __jsx(Banner, {\n    list: bannerList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 13\n    }\n  })), articleList.length === 0 ? __jsx(\"div\", {\n    className: \"empty-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 13\n    }\n  }, __jsx(EmptyArticleList, {\n    systemCategoryId: categoryIdRef.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 15\n    }\n  })) : __jsx(\"ul\", {\n    className: \"article-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 13\n    }\n  }, articleList.map((item, index) => __jsx(\"li\", {\n    className: \"article-item\",\n    key: item ? item.articleId : index,\n    onClick: handleClickThreadItem(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 17\n    }\n  }, __jsx(ThreadsItem, {\n    onRemove: handleRemoveThreads,\n    data: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 19\n    }\n  })))))));\n};\n\nexport var __N_SSP = true;\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}