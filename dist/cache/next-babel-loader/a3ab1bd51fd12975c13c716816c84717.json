{"ast":null,"code":"var _jsxFileName = \"D:\\\\otoProject\\\\workspace\\\\otoloka-mobile-forum\\\\pages\\\\publish\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport styles from './index.module.scss';\nimport TextAreaComponent from '../../components/textarea';\nimport CategoryPicker from '../../components/category-picker';\nimport PublishImagePicker from '../../components/publish-image-picker';\nimport { useRouter } from 'next/router';\nimport ImageViewModal from '../../components/image-view-modal';\nimport PublishService from '../../services/publish';\nimport useMessageBox from '../../hooks/messageBoxHooks';\nimport { useObserver, MobXProviderContext } from 'mobx-react';\nimport { getUrlParameters } from '../../util';\n\nconst PublishPage = () => {\n  const {\n    0: showCategoryPicker,\n    1: setShowCategoryPicker\n  } = useState(false);\n  const {\n    0: categoryId,\n    1: setCategoryId\n  } = useState();\n  const {\n    0: categoryList,\n    1: setCategoryList\n  } = useState([]);\n  const {\n    0: textValue,\n    1: setTextValue\n  } = useState('');\n  const {\n    0: categoryStr,\n    1: setCategoryStr\n  } = useState('');\n  const {\n    0: imageList,\n    1: setImageList\n  } = useState([]);\n  const {\n    0: showImageModal,\n    1: setShowImageModal\n  } = useState(false);\n  const router = useRouter();\n  const service = new PublishService();\n  const showMessageBox = useMessageBox();\n  const {\n    0: isApp,\n    1: setIsApp\n  } = useState(true);\n  const {\n    store\n  } = useContext(MobXProviderContext);\n  const {\n    user\n  } = useObserver(() => ({\n    user: store.user\n  }));\n  const defaultSystemCategoryId = useRef();\n  const systemCategoryListRef = useRef([]);\n  useEffect(() => {\n    const isApp = !!window.ReactNativeWebView;\n    setIsApp(isApp);\n\n    if (isApp) {\n      window.showMessageBoxCallBack = (type, title, message) => {\n        showMessageBox(type, title, message);\n      };\n    }\n\n    service.getForumCategorys().then(dataList => {\n      setCategoryList(dataList);\n      systemCategoryListRef.current = dataList;\n\n      if (defaultSystemCategoryId.current) {\n        handelCatoryId(defaultSystemCategoryId.current);\n      } else {\n        const args = getUrlParameters('systemCategoryId');\n\n        if (args) {\n          handelCatoryId(+args);\n        }\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (!!user && user.userId > -1) {\n      const threadModel = localStorage.getItem('postThreads' + user.userId);\n\n      if (threadModel) {\n        localStorage.removeItem('postThreads' + user.userId);\n        const model = JSON.parse(threadModel);\n        setTextValue(model.content);\n        setImageList(model.photoList);\n        defaultSystemCategoryId.current = model.systemCategoryId;\n        handelCatoryId(defaultSystemCategoryId.current);\n      }\n    }\n  }, [user]);\n\n  const handelCatoryId = categoryId => {\n    const category = systemCategoryListRef.current.find(item => {\n      if (item.value === categoryId) {\n        return item;\n      }\n    });\n\n    if (category) {\n      setCategoryStr(category.label);\n      setCategoryId(category.value);\n    }\n  };\n\n  const handleClosePicker = () => {\n    setShowCategoryPicker(false);\n  };\n\n  const handelSelCategory = () => {\n    setShowCategoryPicker(true);\n  };\n\n  const handlePickCategory = ({\n    detail\n  }) => {\n    if (!!detail) {\n      setCategoryId(detail);\n      let findItem = categoryList.find(item => {\n        if (detail === item.value) {\n          return item;\n        }\n      });\n      setCategoryStr(findItem.label);\n    } else {\n      setCategoryId(categoryList[0].value);\n      setCategoryStr(categoryList[0].label);\n    }\n  };\n\n  const handelInputValue = event => {\n    const value = event.detail;\n    setTextValue(value);\n  };\n\n  const canSubmit = () => {\n    if (!textValue) {\n      return false;\n    }\n\n    if (!categoryStr || categoryStr === 'Pilih Kategori') {\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleImageListChange = imageList => {\n    setImageList(imageList);\n  };\n\n  const backToIndex = () => {\n    if (textValue && !!user && user.userId > -1) {\n      const model = {\n        content: textValue,\n        systemCategoryId: categoryId,\n        photoList: imageList,\n        userId: user.userId\n      };\n      localStorage.setItem('postThreads' + user.userId, JSON.stringify(model));\n    }\n\n    if (isApp) {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        action: 'goBack'\n      }));\n    } else {\n      router.push('/');\n    }\n  };\n\n  const handleShowImageModal = imageItem => {\n    setImageList(imageList => imageList.map(item => {\n      item.active = item.url === imageItem.url;\n      return item;\n    }));\n    setShowImageModal(true);\n  };\n\n  const handleCloseImageModal = () => {\n    setShowImageModal(false);\n  };\n\n  const publishSubmit = () => {\n    if (!canSubmit()) {\n      return;\n    }\n\n    if (isApp) {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        action: 'postThreads',\n        data: {\n          content: textValue,\n          systemCategoryId: categoryId,\n          photoList: imageList,\n          userId: user.userId\n        }\n      }));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: styles['publish-cointainer'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: styles['publish-handle-header'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    onClick: backToIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: `icon-font uniE907 ${styles['icon-close']}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: `${styles['text']} ${canSubmit() ? '' : styles['disabled']}`,\n    onClick: publishSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, \"Kirim\")), __jsx(\"div\", {\n    className: styles['publish-input-container'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, __jsx(TextAreaComponent, {\n    maxSize: 2000,\n    placeholder: \"Isi komentarmu disini...\",\n    onChange: handelInputValue,\n    value: textValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  }), __jsx(PublishImagePicker, {\n    imageList: imageList,\n    onChange: handleImageListChange,\n    onClickImgItem: handleShowImageModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    className: styles['publish-sel-container'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, __jsx(\"li\", {\n    className: styles['list-item'],\n    onClick: handelSelCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    className: categoryStr ? styles['category-selected'] : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  }, __jsx(\"span\", {\n    className: `${styles['iconfonts']} icon-font uniE903`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }\n  }), categoryStr ? categoryStr : 'Pilih Kategori'), __jsx(\"span\", {\n    className: `${styles['arrow']} icon-font uniE906`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  })))), showCategoryPicker ? __jsx(CategoryPicker, {\n    list: categoryList,\n    value: categoryId,\n    onClose: handleClosePicker,\n    onConfirm: handlePickCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }) : null, showImageModal ? __jsx(ImageViewModal, {\n    imageList: imageList,\n    onClose: handleCloseImageModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }) : null));\n};\n\nexport default PublishPage;","map":null,"metadata":{},"sourceType":"module"}