{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard3 = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.emitter = exports.router = exports.version = exports.render = exports.renderError = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"@babel/runtime/helpers/interopRequireWildcard\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _headManager = _interopRequireDefault(require(\"./head-manager\"));\n\nvar _router = require(\"next/router\");\n\nvar _mitt = _interopRequireDefault(require(\"../next-server/lib/mitt\"));\n\nvar _utils = require(\"../next-server/lib/utils\");\n\nvar _pageLoader = _interopRequireDefault(require(\"./page-loader\"));\n\nvar envConfig = _interopRequireWildcard3(require(\"../next-server/lib/runtime-config\"));\n\nvar _headManagerContext = require(\"../next-server/lib/head-manager-context\");\n\nvar _routerContext = require(\"../next-server/lib/router-context\");\n\nvar _querystring = require(\"querystring\");\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar _performanceRelayer = require(\"./performance-relayer\");\n/* global location */\n/// <reference types=\"react-dom/experimental\" />\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar doRender = function doRender(_ref6) {\n  var {\n    App,\n    Component,\n    props,\n    err\n  } = _ref6;\n\n  try {\n    function _temp14() {\n      Component = Component || lastAppProps.Component;\n      props = props || lastAppProps.props;\n      var appProps = (0, _extends2.default)({}, props, {\n        Component,\n        err,\n        router\n      }); // lastAppProps has to be set before ReactDom.render to account for ReactDom throwing an error.\n\n      lastAppProps = appProps;\n      emitter.emit('before-reactdom-render', {\n        Component,\n        ErrorComponent,\n        appProps\n      });\n\n      var elem = _react.default.createElement(AppContainer, null, _react.default.createElement(App, appProps)); // We catch runtime errors using componentDidCatch which will trigger renderError\n\n\n      renderReactElement(process.env.__NEXT_STRICT_MODE ? _react.default.createElement(_react.default.StrictMode, null, elem) : elem, appElement);\n      emitter.emit('after-reactdom-render', {\n        Component,\n        ErrorComponent,\n        appProps\n      });\n    }\n\n    var _temp15 = function () {\n      if (!props && Component && Component !== ErrorComponent && lastAppProps.Component === ErrorComponent) {\n        var {\n          pathname,\n          query: _query,\n          asPath: _asPath\n        } = router;\n        var AppTree = wrapApp(App);\n        var appCtx = {\n          router,\n          AppTree,\n          Component: ErrorComponent,\n          ctx: {\n            err,\n            pathname,\n            query: _query,\n            asPath: _asPath,\n            AppTree\n          }\n        };\n        return Promise.resolve((0, _utils.loadGetInitialProps)(App, appCtx)).then(function (_loadGetInitialProps) {\n          props = _loadGetInitialProps;\n        });\n      }\n    }(); // Usual getInitialProps fetching is handled in next/router\n    // this is for when ErrorComponent gets replaced by Component by HMR\n\n\n    return Promise.resolve(_temp15 && _temp15.then ? _temp15.then(_temp14) : _temp14(_temp15));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}; // This method handles all runtime and debug errors.\n// 404 and 500 errors are special kind of errors\n// and they are still handle via the main render method.\n\n\nvar renderError = function renderError(props) {\n  try {\n    var {\n      App: _App,\n      err: _err\n    } = props; // In development runtime errors are caught by react-error-overlay\n    // In production we catch runtime errors using componentDidCatch which will trigger renderError\n\n    if (false) {\n      return Promise.resolve(webpackHMR.reportRuntimeError(webpackHMR.prepareError(_err)));\n    }\n\n    if (process.env.__NEXT_PLUGINS) {\n      // eslint-disable-next-line\n      Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('next-plugin-loader?middleware=on-error-client!'))).then(mod => {\n        return mod.default({\n          err: _err\n        });\n      }).catch(err => {\n        console.error('error calling on-error-client for plugins', err);\n      });\n    } // Make sure we log the error to the console, otherwise users can't track down issues.\n\n\n    console.error(_err);\n    return Promise.resolve(pageLoader.loadPage('/_error')).then(function (_pageLoader$loadPage2) {\n      function _temp11(initProps) {\n        return Promise.resolve(doRender((0, _extends2.default)({}, props, {\n          err: _err,\n          Component: ErrorComponent,\n          props: initProps\n        }))).then(function () {});\n      }\n\n      ({\n        page: ErrorComponent\n      } = _pageLoader$loadPage2); // In production we do a normal render with the `ErrorComponent` as component.\n      // If we've gotten here upon initial render, we can use the props from the server.\n      // Otherwise, we need to call `getInitialProps` on `App` before mounting.\n\n      var AppTree = wrapApp(_App);\n      var appCtx = {\n        Component: ErrorComponent,\n        AppTree,\n        router,\n        ctx: {\n          err: _err,\n          pathname: page,\n          query,\n          asPath,\n          AppTree\n        }\n      };\n      var _props$props = props.props;\n      return _props$props ? _temp11(props.props) : Promise.resolve((0, _utils.loadGetInitialProps)(_App, appCtx)).then(_temp11);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}; // If hydrate does not exist, eg in preact.\n\n\nexports.renderError = renderError;\n\nvar render = function render(props) {\n  try {\n    var _exit3 = false;\n\n    function _temp9(_result2) {\n      if (_exit3) return _result2;\n\n      var _temp6 = _catch(function () {\n        return Promise.resolve(doRender(props)).then(function () {});\n      }, function (err) {\n        return Promise.resolve(renderError((0, _extends2.default)({}, props, {\n          err\n        }))).then(function () {});\n      });\n\n      if (_temp6 && _temp6.then) return _temp6.then(function () {});\n    }\n\n    var _temp10 = function () {\n      if (props.err) {\n        return Promise.resolve(renderError(props)).then(function () {\n          _exit3 = true;\n        });\n      }\n    }();\n\n    return Promise.resolve(_temp10 && _temp10.then ? _temp10.then(_temp9) : _temp9(_temp10));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexports.render = render;\n\nif (!('finally' in Promise.prototype)) {\n  // eslint-disable-next-line no-extend-native\n  Promise.prototype.finally = require('next/dist/build/polyfills/finally-polyfill.min');\n}\n\nvar data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nwindow.__NEXT_DATA__ = data;\nvar version = \"9.3.6\";\nexports.version = version;\nvar {\n  props,\n  err,\n  page,\n  query,\n  buildId,\n  assetPrefix,\n  runtimeConfig,\n  dynamicIds,\n  isFallback\n} = data;\nvar prefix = assetPrefix || ''; // With dynamic assetPrefix it's no longer possible to set assetPrefix at the build time\n// So, this is how we do it in the client side at runtime\n\n__webpack_public_path__ = prefix + \"/_next/\"; //eslint-disable-line\n// Initialize next/config with the environment configuration\n\nenvConfig.setConfig({\n  serverRuntimeConfig: {},\n  publicRuntimeConfig: runtimeConfig || {}\n});\nvar asPath = (0, _utils.getURL)();\nvar pageLoader = new _pageLoader.default(buildId, prefix);\n\nvar register = _ref => {\n  var [r, f] = _ref;\n  return pageLoader.registerPage(r, f);\n};\n\nif (window.__NEXT_P) {\n  window.__NEXT_P.map(register);\n}\n\nwindow.__NEXT_P = [];\nwindow.__NEXT_P.push = register;\nvar updateHead = (0, _headManager.default)();\nvar appElement = document.getElementById('__next');\nvar lastAppProps;\nvar webpackHMR;\nvar router;\nexports.router = router;\nvar ErrorComponent;\nvar Component;\nvar App, onPerfEntry;\n\nclass Container extends _react.default.Component {\n  componentDidCatch(err, info) {\n    this.props.fn(err, info);\n  }\n\n  componentDidMount() {\n    this.scrollToHash();\n\n    if (process.env.__NEXT_PLUGINS) {\n      // eslint-disable-next-line\n      Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('next-plugin-loader?middleware=unstable-post-hydration!'))).then(mod => {\n        return mod.default();\n      }).catch(err => {\n        console.error('Error calling post-hydration for plugins', err);\n      });\n    } // We need to replace the router state if:\n    // - the page was (auto) exported and has a query string or search (hash)\n    // - it was auto exported and is a dynamic route (to provide params)\n    // - if it is a client-side skeleton (fallback render)\n\n\n    if (router.isSsr && (isFallback || data.nextExport && ((0, _isDynamic.isDynamicRoute)(router.pathname) || location.search) || props.__N_SSG && location.search)) {\n      // update query on mount for exported pages\n      router.replace(router.pathname + '?' + (0, _querystring.stringify)((0, _extends2.default)({}, router.query, {}, (0, _querystring.parse)(location.search.substr(1)))), asPath, {\n        // WARNING: `_h` is an internal option for handing Next.js\n        // client-side hydration. Your app should _never_ use this property.\n        // It may change at any time without notice.\n        _h: 1,\n        // Fallback pages must trigger the data fetch, so the transition is\n        // not shallow.\n        // Other pages (strictly updating query) happens shallowly, as data\n        // requirements would already be present.\n        shallow: !isFallback\n      });\n    }\n\n    if (process.env.__NEXT_TEST_MODE) {\n      window.__NEXT_HYDRATED = true;\n\n      if (window.__NEXT_HYDRATED_CB) {\n        window.__NEXT_HYDRATED_CB();\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    this.scrollToHash();\n  }\n\n  scrollToHash() {\n    var {\n      hash\n    } = location;\n    hash = hash && hash.substring(1);\n    if (!hash) return;\n    var el = document.getElementById(hash);\n    if (!el) return; // If we call scrollIntoView() in here without a setTimeout\n    // it won't scroll properly.\n\n    setTimeout(() => el.scrollIntoView(), 0);\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nvar emitter = (0, _mitt.default)();\nexports.emitter = emitter;\n\nvar _default = function _default(_temp5) {\n  var {\n    webpackHMR: passedWebpackHMR\n  } = _temp5 === void 0 ? {} : _temp5;\n\n  try {\n    // This makes sure this specific lines are removed in production\n    if (false) {\n      webpackHMR = passedWebpackHMR;\n    }\n\n    return Promise.resolve(pageLoader.loadPageScript('/_app')).then(function (_ref2) {\n      var _exit = false;\n      var {\n        page: app,\n        mod\n      } = _ref2;\n\n      function _temp4(_result) {\n        if (_exit) return _result;\n\n        function _temp2() {\n          exports.router = router = (0, _router.createRouter)(page, query, asPath, {\n            initialProps: props,\n            pageLoader,\n            App,\n            Component,\n            wrapApp,\n            err: initialErr,\n            isFallback,\n            subscription: (_ref3, App) => {\n              var {\n                Component,\n                props,\n                err\n              } = _ref3;\n              render({\n                App,\n                Component,\n                props,\n                err\n              });\n            }\n          }); // call init-client middleware\n\n          if (process.env.__NEXT_PLUGINS) {\n            // eslint-disable-next-line\n            Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('next-plugin-loader?middleware=on-init-client!'))).then(mod => {\n              return mod.default({\n                router\n              });\n            }).catch(err => {\n              console.error('Error calling client-init for plugins', err);\n            });\n          }\n\n          var renderCtx = {\n            App,\n            Component,\n            props,\n            err: initialErr\n          };\n\n          if (true) {\n            render(renderCtx);\n            return emitter;\n          }\n\n          if (false) {\n            return {\n              emitter,\n              render,\n              renderCtx\n            };\n          }\n        }\n\n        var _temp = function () {\n          if (window.__NEXT_PRELOADREADY) {\n            return Promise.resolve(window.__NEXT_PRELOADREADY(dynamicIds)).then(function () {});\n          }\n        }();\n\n        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);\n      }\n\n      App = app;\n\n      if (mod && mod.unstable_onPerformanceData) {\n        onPerfEntry = function onPerfEntry(_ref4) {\n          var {\n            name,\n            startTime,\n            value,\n            duration,\n            entryType\n          } = _ref4;\n          mod.unstable_onPerformanceData({\n            name,\n            startTime,\n            value,\n            duration,\n            entryType\n          });\n        };\n      }\n\n      var initialErr = err;\n\n      var _temp3 = _catch(function () {\n        ;\n        return Promise.resolve(pageLoader.loadPage(page)).then(function (_pageLoader$loadPage) {\n          ({\n            page: Component\n          } = _pageLoader$loadPage);\n\n          if (false) {\n            var {\n              isValidElementType\n            } = require('react-is');\n\n            if (!isValidElementType(Component)) {\n              throw new Error(\"The default export is not a React Component in page: \\\"\" + page + \"\\\"\");\n            }\n          }\n        });\n      }, function (error) {\n        // This catches errors like throwing in the top level of a module\n        initialErr = error;\n      });\n\n      return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexports.default = _default;\nvar isInitialRender = typeof _reactDom.default.hydrate === 'function';\nvar reactRoot = null;\n\nfunction renderReactElement(reactEl, domEl) {\n  if (process.env.__NEXT_REACT_MODE !== 'legacy') {\n    if (!reactRoot) {\n      var opts = {\n        hydrate: true\n      };\n      reactRoot = process.env.__NEXT_REACT_MODE === 'concurrent' ? _reactDom.default.createRoot(domEl, opts) : _reactDom.default.createBlockingRoot(domEl, opts);\n    }\n\n    reactRoot.render(reactEl);\n  } else {\n    // mark start of hydrate/render\n    if (_utils.ST) {\n      performance.mark('beforeRender');\n    } // The check for `.hydrate` is there to support React alternatives like preact\n\n\n    if (isInitialRender) {\n      _reactDom.default.hydrate(reactEl, domEl, markHydrateComplete);\n\n      isInitialRender = false;\n    } else {\n      _reactDom.default.render(reactEl, domEl, markRenderComplete);\n    }\n  }\n\n  if (onPerfEntry && _utils.ST) {\n    try {\n      (0, _performanceRelayer.observeLayoutShift)(onPerfEntry);\n      (0, _performanceRelayer.observeLargestContentfulPaint)(onPerfEntry);\n      (0, _performanceRelayer.observePaint)(onPerfEntry);\n    } catch (e) {\n      window.addEventListener('load', () => {\n        performance.getEntriesByType('paint').forEach(onPerfEntry);\n      });\n    }\n  }\n}\n\nfunction markHydrateComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterHydrate'); // mark end of hydration\n\n  performance.measure('Next.js-before-hydration', 'navigationStart', 'beforeRender');\n  performance.measure('Next.js-hydration', 'beforeRender', 'afterHydrate');\n\n  if (onPerfEntry) {\n    if (process.env.__NEXT_FID_POLYFILL) {\n      Promise.resolve().then(() => (0, _interopRequireWildcard2.default)(require('../next-server/lib/fid-measure'))).then(mod => {\n        mod.default(onPerfEntry);\n      }).catch(err => {\n        console.error('Error measuring First Input Delay', err);\n      });\n    }\n\n    performance.getEntriesByName('Next.js-hydration').forEach(onPerfEntry);\n    performance.getEntriesByName('beforeRender').forEach(onPerfEntry);\n  }\n\n  clearMarks();\n}\n\nfunction markRenderComplete() {\n  if (!_utils.ST) return;\n  performance.mark('afterRender'); // mark end of render\n\n  var navStartEntries = performance.getEntriesByName('routeChange', 'mark');\n\n  if (!navStartEntries.length) {\n    return;\n  }\n\n  performance.measure('Next.js-route-change-to-render', navStartEntries[0].name, 'beforeRender');\n  performance.measure('Next.js-render', 'beforeRender', 'afterRender');\n\n  if (onPerfEntry) {\n    performance.getEntriesByName('Next.js-render').forEach(onPerfEntry);\n    performance.getEntriesByName('Next.js-route-change-to-render').forEach(onPerfEntry);\n  }\n\n  clearMarks();\n  ['Next.js-route-change-to-render', 'Next.js-render'].forEach(measure => performance.clearMeasures(measure));\n}\n\nfunction clearMarks() {\n  ;\n  ['beforeRender', 'afterHydrate', 'afterRender', 'routeChange'].forEach(mark => performance.clearMarks(mark));\n}\n\nfunction AppContainer(_ref5) {\n  var {\n    children\n  } = _ref5;\n  return _react.default.createElement(Container, {\n    fn: error => renderError({\n      App,\n      err: error\n    }).catch(err => console.error('Error rendering page: ', err))\n  }, _react.default.createElement(_routerContext.RouterContext.Provider, {\n    value: (0, _router.makePublicRouterInstance)(router)\n  }, _react.default.createElement(_headManagerContext.HeadManagerContext.Provider, {\n    value: updateHead\n  }, children)));\n}\n\nvar wrapApp = App => props => {\n  var appProps = (0, _extends2.default)({}, props, {\n    Component,\n    err,\n    router\n  });\n  return _react.default.createElement(AppContainer, null, _react.default.createElement(App, appProps));\n};","map":null,"metadata":{},"sourceType":"script"}