{"ast":null,"code":"var _jsxFileName = \"D:\\\\otoProject\\\\workspace\\\\otoloka-mobile-forum\\\\components\\\\scroll-container\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef, useCallback, useContext } from 'react';\nimport './index.scss';\nimport BScroll from 'better-scroll';\nimport { DomChangeSubject } from '../../subject/dom';\nimport useUpdateEffect from '../../hooks/updateHook';\nimport { MobXProviderContext, useObserver } from 'mobx-react';\n\nconst ScrollContainer = ({\n  children,\n  onPullDown,\n  onPullUp,\n  onScroll,\n  pullUp = true,\n  pullDown = true,\n  scrollIntoView,\n  observeDOM = false,\n  x = 0,\n  y = 0\n}) => {\n  const {\n    0: isClient,\n    1: setIsClient\n  } = useState(false);\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  return isClient ? __jsx(_ScrollContainer, {\n    onPullDown: onPullDown,\n    onPullUp: onPullUp,\n    pullUp: pullUp,\n    pullDown: pullDown,\n    onScroll: onScroll,\n    scrollIntoView: scrollIntoView,\n    observeDOM: observeDOM,\n    x: x,\n    y: y,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, children) : null;\n};\n\nconst _ScrollContainer = ({\n  children,\n  onPullDown,\n  onPullUp,\n  pullUp = true,\n  pullDown = true,\n  onScroll,\n  scrollIntoView,\n  observeDOM = false,\n  x = 0,\n  y = 0\n}) => {\n  const {\n    0: refreshText,\n    1: setRefreshText\n  } = useState('↓ Tarik untuk refresh…');\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const isFinished = useRef(true);\n  const isMounted = useRef(false);\n  const scrollInstance = useRef();\n  const isScrollEnd = useRef(true);\n  const {\n    0: containerElement,\n    1: setContainerElement\n  } = useState();\n  const {\n    0: containerHeight,\n    1: setContainerHeight\n  } = useState('100%');\n  const {\n    store\n  } = useContext(MobXProviderContext);\n  const {\n    noImageMode\n  } = useObserver(() => ({\n    noImageMode: store.noImageMode\n  }));\n  const pullDownOption = {\n    threshold: 60,\n    stop: 50\n  };\n  const pullUpOption = {\n    threshold: 360\n  };\n  useUpdateEffect(() => {\n    if (scrollInstance.current) {\n      scrollInstance.current.refresh();\n    }\n  }, [noImageMode]);\n  useUpdateEffect(() => {\n    if (scrollInstance.current && scrollIntoView) {\n      isScrollEnd.current = false;\n      scrollInstance.current.scrollToElement(scrollIntoView, 600);\n    } else {\n      console.error('scrollIntoView effect error!');\n      console.error('typeof scroll = ' + typeof scrollInstance.current);\n    }\n  }, [scrollIntoView]);\n  useUpdateEffect(() => {\n    if (scrollInstance.current && typeof x === 'number' && typeof y === 'number') {\n      isScrollEnd.current = false;\n      scrollInstance.current.scrollTo(x, y, 600);\n    } else {\n      console.error('scrollTo X Y effect error!');\n      console.error('typeof scroll = ' + typeof scrollInstance.current);\n    }\n  }, [x, y]);\n  useEffect(() => {\n    if (containerElement) {\n      isMounted.current = true;\n      const height = containerElement.parentElement.getBoundingClientRect().height;\n      setContainerHeight(height + 'px');\n      let DomChangeSubjectSubscription = null;\n      setTimeout(() => {\n        scrollInstance.current = new BScroll('#scroll-container-component', {\n          probeType: 1,\n          bounce: true,\n          bounceTime: 600,\n          pullDownRefresh: pullDown ? pullDownOption : false,\n          pullUpLoad: pullUp ? pullUpOption : false,\n          observeDOM: observeDOM,\n          useTransition: false,\n          click: true,\n          startX: x,\n          startY: y\n        });\n\n        if (pullDown === true) {\n          registerPullDownEvent();\n        }\n\n        if (pullUp) {\n          registerPullUpEvent();\n        }\n\n        if (typeof onScroll === 'function') {\n          scrollInstance.current.on('scroll', handleEmitScrollEvent);\n          scrollInstance.current.on('scrollEnd', handleScrollEnd);\n        }\n\n        DomChangeSubjectSubscription = DomChangeSubject.subscribe(() => {\n          setContainerHeight('100%');\n          setTimeout(() => {\n            const height = containerElement.parentElement.getBoundingClientRect().height;\n            setContainerHeight(height + 'px');\n            setTimeout(() => {\n              scrollInstance.current.refresh();\n            });\n          });\n        });\n      });\n      return () => {\n        if (scrollInstance.current) {\n          scrollInstance.current.off('scroll', handleEmitScrollEvent);\n          scrollInstance.current.off('scrollEnd', handleEmitScrollEvent);\n          scrollInstance.current.destroy();\n          scrollInstance.current = null;\n        }\n\n        isMounted.current = false;\n\n        if (DomChangeSubjectSubscription) {\n          DomChangeSubjectSubscription.unsubscribe();\n        }\n      };\n    }\n  }, [containerElement]);\n  const registerPullDownEvent = useCallback(() => {\n    scrollInstance.current.on('pullingDown', handlePullingDown);\n    scrollInstance.current.on('scroll', handleScroll);\n  }, []);\n  const unregisterPullDownEvent = useCallback(() => {\n    scrollInstance.current.off('pullingDown', handlePullingDown);\n    scrollInstance.current.off('scroll', handleScroll);\n  }, []);\n  const registerPullUpEvent = useCallback(() => {\n    scrollInstance.current.on('pullingUp', handlePullingUp);\n  }, []);\n  const unregisterPullUpEvent = useCallback(() => {\n    scrollInstance.current.off('pullingUp', handlePullingUp);\n  }, []);\n  const handlePullingDown = useCallback(() => {\n    setIsLoading(true);\n\n    if (typeof onPullDown === 'function') {\n      onPullDown(scrollInstance.current).then(() => {\n        if (isMounted.current === true) {\n          setIsLoading(false);\n          setRefreshText('Lengkap');\n          scrollInstance.current.finishPullDown();\n          scrollInstance.current.once('scrollEnd', () => {\n            if (isMounted.current === true) {\n              setRefreshText('↓ Tarik untuk refresh…');\n              scrollInstance.current.refresh();\n              isFinished.current = true;\n            }\n          });\n        }\n      });\n    }\n  }, []);\n  const handleScroll = useCallback(({\n    y\n  }) => {\n    if (y >= 60) {\n      if (isFinished.current === true) {\n        isFinished.current = false;\n        setRefreshText('↑ Lepaskan refresh…');\n      }\n    } else {\n      if (isFinished.current === false) {\n        isFinished.current = true;\n        setRefreshText('↓ Tarik untuk refresh…');\n      }\n    }\n  }, []);\n\n  const handleScrollEnd = () => {\n    isScrollEnd.current = true;\n  };\n\n  const handleEmitScrollEvent = useCallback(({\n    x,\n    y\n  }) => {\n    if (isScrollEnd.current === true && typeof onScroll === 'function') {\n      onScroll({\n        x,\n        y\n      });\n    }\n  }, []);\n  const handlePullingUp = useCallback(() => {\n    if (typeof onPullUp === 'function') {\n      onPullUp(scrollInstance.current).then(() => {\n        if (isMounted.current === true) {\n          scrollInstance.current.finishPullUp();\n          scrollInstance.current.refresh();\n        }\n      });\n    }\n  }, []);\n  useUpdateEffect(() => {\n    if (scrollInstance.current) {\n      if (pullDown === true) {\n        scrollInstance.current.openPullDown(pullDownOption);\n        registerPullDownEvent();\n      } else {\n        scrollInstance.current.closePullDown();\n        unregisterPullDownEvent();\n      }\n    } else {\n      console.error('pullDown event error!');\n      console.error('typeof scroll = ' + typeof scrollInstance.current);\n    }\n  }, [pullDown]);\n  useUpdateEffect(() => {\n    if (scrollInstance.current) {\n      if (pullUp === true) {\n        scrollInstance.current.openPullUp(pullUpOption);\n        registerPullUpEvent();\n      } else {\n        scrollInstance.current.closePullUp();\n        unregisterPullUpEvent();\n      }\n    } else {\n      console.error('pullUp event error!');\n      console.error('typeof scroll = ' + typeof scrollInstance.current);\n    }\n  }, [pullUp]);\n  return __jsx(\"div\", {\n    ref: setContainerElement,\n    className: \"scroll-container-component\",\n    id: \"scroll-container-component\",\n    style: {\n      height: containerHeight\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, pullDown ? __jsx(\"div\", {\n    className: \"pull-down-refresh-indicator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, isLoading ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"icon-font uniE910\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 17\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, \"Loading...\")) : __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 17\n    }\n  }, refreshText)) : null, __jsx(\"div\", {\n    className: \"scroll-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, children)));\n};\n\nexport default ScrollContainer;","map":null,"metadata":{},"sourceType":"module"}