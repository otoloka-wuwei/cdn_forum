{"ast":null,"code":"import fetch from 'node-fetch';\nimport HTTPAgent from 'socks5-http-client/lib/Agent';\nimport HTTPsAgent from 'socks5-https-client/lib/Agent';\n\nconst get = function (url, body = {}, options) {\n  try {\n    const bodyArr = [];\n    Object.keys(body).forEach(key => {\n      bodyArr.push(key + '=' + body[key].toString());\n    });\n\n    if (bodyArr.length > 0) {\n      url = `${url}?${bodyArr.join('&')}`;\n    }\n\n    return request(url, 'GET', {}, options);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst post = function (url, body = {}, options) {\n  return request(url, 'POST', body, options);\n};\n\nconst del = function (url, body = {}, options) {\n  return request(url, 'DELETE', body, options);\n};\n\nconst patch = function (url, body = {}, options) {\n  return request(url, 'PATCH', body, options);\n};\n\nconst request = function (url, method, body = {}, {\n  headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  },\n  proxy = false\n} = {}) {\n  try {\n    if (url.startsWith('/') && false) {\n      url = process.env.BASE_API_ADDRESS + url;\n    }\n\n    const options = {\n      body: method === 'GET' ? null : JSON.stringify(body),\n      headers,\n      method,\n      agent: null\n    };\n\n    if (proxy === true) {\n      const setting = {\n        socksHost: 'localhost',\n        socksPort: '1080'\n      };\n      const httpAgent = new HTTPAgent(setting);\n      const httpsAgent = new HTTPsAgent(setting);\n      if (url.startsWith('http://')) options.agent = httpAgent;\n      if (url.startsWith('https://')) options.agent = httpsAgent;\n    }\n\n    return Promise.resolve(new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error('request is timeout'));\n      }, 30 * 1000);\n      fetch(url, options).then(resp => {\n        clearTimeout(timeoutId);\n        return Promise.resolve(resp.json());\n      }).then(resp => {\n        if (resp.code !== 200) {\n          return Promise.reject({\n            code: resp.code,\n            message: resp.resultMsg,\n            data: resp.data\n          });\n        }\n\n        resolve(resp);\n      }).catch(error => {\n        console.log(url);\n        clearTimeout(timeoutId);\n        reject(error);\n      });\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst HttpClientServer = {\n  get,\n  post,\n  del,\n  patch,\n  request\n};\nexport default HttpClientServer;","map":null,"metadata":{},"sourceType":"module"}