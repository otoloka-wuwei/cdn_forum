{"ast":null,"code":"import HttpClient from '../http/HttpClient';\nimport HttpClientServer from '../http/HttpClientServer';\nimport { formatArticle, formatMessageList } from '../format';\nexport default class CategoryService {\n  updateArticleLike(articleId) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/userarticle/updateArticleSupportNums.json', {\n        articleId\n      }).then(resp => Promise.resolve(resp)));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  querySupportFlag(articleId) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/userarticle/querySupportFlag.json', {\n        articleId\n      }).then(resp => {\n        return Promise.resolve(resp.data);\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  queryArticleDetails(articleId) {\n    try {\n      return Promise.resolve(HttpClientServer.post('/web/userarticle/queryArticleDetails.json', {\n        articleId\n      }).then(resp => {\n        if (resp.code === 9990) {\n          return Promise.resolve(resp);\n        } else {\n          return Promise.resolve(formatArticle(resp.data));\n        }\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  getFirstMessagesList(articleId, pageNum, pageSize) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/articleMessage/getMessages.json', {\n        articleId,\n        pageNum,\n        pageSize\n      }).then(resp => {\n        return Promise.resolve(resp.data || {\n          list: [],\n          total: 0\n        });\n      }).then(resp => {\n        return Promise.resolve({\n          list: formatMessageList(resp.list),\n          total: resp.total\n        });\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  getSecondMessagesList(parentMessageId, pageNum, pageSize) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/articleMessage/querySonMessage.json', {\n        parentMessageId,\n        pageNum,\n        pageSize\n      }).then(resp => {\n        return Promise.resolve(resp.data || {\n          list: [],\n          total: 0\n        });\n      }).then(resp => {\n        return Promise.resolve({\n          list: formatMessageList(resp.list),\n          total: resp.total\n        });\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  leavingMessage(model) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/articleMessage/leavingMessage.json', model).then(resp => {\n        return Promise.resolve(resp.data);\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  deleteMessage(id) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/articleMessage/deleteMessage.json', {\n        id\n      }).then(resp => Promise.resolve(resp.data)));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  getReportOptionList() {\n    try {\n      return Promise.resolve(HttpClientServer.post('/web/user/getReport.json').then(resp => Promise.resolve(resp.data)).then(optionList => Promise.resolve(optionList.map(item => ({\n        value: item.id,\n        label: item.typeName\n      })))));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  submitReport(reportId, userArticleId, comments = '') {\n    try {\n      return Promise.resolve(HttpClient.post('/web/forum/report/doReport.json', {\n        reportId,\n        userArticleId,\n        comments\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n  updateArticleShareNums(articleId) {\n    try {\n      return Promise.resolve(HttpClient.post('/web/userarticle/updateArticleShareNums.json', {\n        articleId\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}